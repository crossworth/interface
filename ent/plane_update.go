// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/garage"
	"entgo.io/bug/ent/plane"
	"entgo.io/bug/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaneUpdate is the builder for updating Plane entities.
type PlaneUpdate struct {
	config
	hooks    []Hook
	mutation *PlaneMutation
}

// Where appends a list predicates to the PlaneUpdate builder.
func (pu *PlaneUpdate) Where(ps ...predicate.Plane) *PlaneUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PlaneUpdate) SetName(s string) *PlaneUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetGarageID sets the "garage_id" field.
func (pu *PlaneUpdate) SetGarageID(i int) *PlaneUpdate {
	pu.mutation.SetGarageID(i)
	return pu
}

// SetNillableGarageID sets the "garage_id" field if the given value is not nil.
func (pu *PlaneUpdate) SetNillableGarageID(i *int) *PlaneUpdate {
	if i != nil {
		pu.SetGarageID(*i)
	}
	return pu
}

// ClearGarageID clears the value of the "garage_id" field.
func (pu *PlaneUpdate) ClearGarageID() *PlaneUpdate {
	pu.mutation.ClearGarageID()
	return pu
}

// SetGarage sets the "garage" edge to the Garage entity.
func (pu *PlaneUpdate) SetGarage(g *Garage) *PlaneUpdate {
	return pu.SetGarageID(g.ID)
}

// Mutation returns the PlaneMutation object of the builder.
func (pu *PlaneUpdate) Mutation() *PlaneMutation {
	return pu.mutation
}

// ClearGarage clears the "garage" edge to the Garage entity.
func (pu *PlaneUpdate) ClearGarage() *PlaneUpdate {
	pu.mutation.ClearGarage()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlaneUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlaneMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlaneUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlaneUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlaneUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlaneUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plane.Table,
			Columns: plane.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plane.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: plane.FieldName,
		})
	}
	if pu.mutation.GarageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plane.GarageTable,
			Columns: []string{plane.GarageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: garage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.GarageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plane.GarageTable,
			Columns: []string{plane.GarageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: garage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plane.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PlaneUpdateOne is the builder for updating a single Plane entity.
type PlaneUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaneMutation
}

// SetName sets the "name" field.
func (puo *PlaneUpdateOne) SetName(s string) *PlaneUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetGarageID sets the "garage_id" field.
func (puo *PlaneUpdateOne) SetGarageID(i int) *PlaneUpdateOne {
	puo.mutation.SetGarageID(i)
	return puo
}

// SetNillableGarageID sets the "garage_id" field if the given value is not nil.
func (puo *PlaneUpdateOne) SetNillableGarageID(i *int) *PlaneUpdateOne {
	if i != nil {
		puo.SetGarageID(*i)
	}
	return puo
}

// ClearGarageID clears the value of the "garage_id" field.
func (puo *PlaneUpdateOne) ClearGarageID() *PlaneUpdateOne {
	puo.mutation.ClearGarageID()
	return puo
}

// SetGarage sets the "garage" edge to the Garage entity.
func (puo *PlaneUpdateOne) SetGarage(g *Garage) *PlaneUpdateOne {
	return puo.SetGarageID(g.ID)
}

// Mutation returns the PlaneMutation object of the builder.
func (puo *PlaneUpdateOne) Mutation() *PlaneMutation {
	return puo.mutation
}

// ClearGarage clears the "garage" edge to the Garage entity.
func (puo *PlaneUpdateOne) ClearGarage() *PlaneUpdateOne {
	puo.mutation.ClearGarage()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlaneUpdateOne) Select(field string, fields ...string) *PlaneUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Plane entity.
func (puo *PlaneUpdateOne) Save(ctx context.Context) (*Plane, error) {
	var (
		err  error
		node *Plane
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlaneMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlaneUpdateOne) SaveX(ctx context.Context) *Plane {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlaneUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlaneUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlaneUpdateOne) sqlSave(ctx context.Context) (_node *Plane, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plane.Table,
			Columns: plane.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plane.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Plane.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plane.FieldID)
		for _, f := range fields {
			if !plane.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plane.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: plane.FieldName,
		})
	}
	if puo.mutation.GarageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plane.GarageTable,
			Columns: []string{plane.GarageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: garage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.GarageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plane.GarageTable,
			Columns: []string{plane.GarageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: garage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Plane{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plane.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
